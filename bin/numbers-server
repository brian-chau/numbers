#!/usr/bin/env ruby

require 'sinatra'
require 'sinatra/cross_origin'
require 'numbers'
require 'json'

set bind: '0.0.0.0'
use Rack::Deflater

fast = ENV["NUMBERS_FAST"] || "./numbers-fast"
solver = Numbers::Solver.new(Numbers::Runner.new(fast))

separator = "+"
valid_number = %r'[1-9][0-9]{0,6}'
max_numbers = 6
max_target = 1000000 # matches MAX_TARGET in ../numbers-fast.c
max_number = 1000 # matches MAX_NUMBER in ../numbers-fast.c
numbers_pattern = %r'#{valid_number}(?:#{Regexp.quote separator}#{valid_number}){0,#{max_numbers-1}}'

get %r'^/static/(.*)$' do |path|
  send_file File.join("./public", path)
end

get %r'^/numbers/target/(?<target>#{valid_number})/numbers/(?<numbers>#{numbers_pattern})(?<verbose>/verbose)?$' do |target, numbers, verbose|
  target = target.to_i
  numbers = numbers.split(separator).map(&:to_i)

  if target > max_target or numbers.max > max_number
    halt 404
  end

  if numbers != numbers.sort
    redirect to("/numbers/target/#{target}/numbers/#{numbers.sort.join separator}"), 301
  end

  data = solver.solve(numbers, target)

  data.uniq! {|d| d[:string]}
  data.reverse!

  unless verbose
    data.each do |d|
      d.delete :reverse_polish
      d.delete :tree1
      d.delete :tree2
      d.delete :tree3
      d.delete :tree4
    end
  end

  content_type "application/json"
  cross_origin :allow_origin => 'http://127.0.0.1:1801',
    :allow_methods => [:get],
    :allow_credentials => false,
    :max_age => "300"
  expires 300, :public
  JSON.generate(data)+"\n"
end

